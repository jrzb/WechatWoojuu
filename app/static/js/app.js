// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var wwApp, wwAppDep;

  wwApp = angular.module('wwApp', ['wwAppDep']);

  wwAppDep = angular.module('wwAppDep', ['ngResource']);

  wwAppDep.config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      $routeProvider.when('/', {
        templateUrl: '/static/partials/no.html'
      });
      $routeProvider.when('/u/:userId', {
        templateUrl: '/static/partials/dashboard.html',
        controller: 'DashboardCtrl'
      });
      $routeProvider.when('/u/:userId/details', {
        templateUrl: '/static/partials/details.html',
        controller: 'DetailsCtrl'
      });
      $routeProvider.otherwise({
        redirectTo: '/'
      });
      return $locationProvider.html5Mode(true);
    }
  ]);

  wwAppDep.controller('MainCtrl', [
    '$scope', '$location', function($scope, $location) {
      var pathArray;

      pathArray = $location.path().split('/');
      return $scope.userId = pathArray[2];
    }
  ]);

  wwAppDep.controller('DashboardCtrl', [
    '$scope', '$http', '$routeParams', '$filter', 'DashboardAPI', 'SharedProperties', function($scope, $http, $routeParams, $filter, DashboardAPI, SharedProperties) {
      var chartParams, chartPeriod, currWeek, summaryParams, summaryPeriod, topCategoryParams, userId;

      userId = $routeParams.userId;
      currWeek = Date.today().getWeek() - 1;
      summaryPeriod = SharedProperties.getWeek(currWeek);
      summaryParams = {
        userid: userId,
        categories: '',
        fromdate: summaryPeriod.firstWeekDay,
        enddate: summaryPeriod.lastWeekDay
      };
      DashboardAPI.summary(summaryParams, function(data) {
        return $scope.summary = data[0];
      });
      topCategoryParams = {
        userid: $routeParams.userId,
        fromdate: summaryPeriod.firstWeekDay,
        enddate: summaryPeriod.lastWeekDay,
        limit: 1
      };
      DashboardAPI.category(topCategoryParams, function(data) {
        return $scope.top = data[0];
      });
      chartPeriod = SharedProperties.getWeek(0);
      chartParams = {
        userid: userId,
        fromdate: chartPeriod.firstWeekDay,
        enddate: chartPeriod.lastWeekDay
      };
      return DashboardAPI.chart(chartParams, function(data) {
        var chart, daily, weeklyExpenses;

        weeklyExpenses = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            daily = data[_i];
            _results.push(parseInt(daily.totalamount));
          }
          return _results;
        })();
        Highcharts.setOptions({
          colors: ['rgb(65,105,42)', 'rgb(29,78,0)', 'rgb(225,231,217)', 'rgb(65,105,42)', 'rgb(29,78,0)', 'rgb(225,231,217)', 'rgb(65,105,42)', 'rgb(29,78,0)', 'rgb(225,231,217)', 'rgb(225,231,217)']
        });
        chart = {
          chart: {
            backgroundColor: null
          },
          credits: {
            enabled: false
          },
          subtitle: {
            text: null
          },
          legend: {
            enabled: false
          },
          exporting: {
            enabled: false
          },
          tooltip: {
            backgroundColor: 'rgba(225,231,217,0.65)',
            borderWidth: 0,
            shadow: false
          },
          xAxis: {
            categories: ['周一', '二', '三', '四', '五', '六', '日'],
            lineWidth: 0,
            tickColor: Highcharts.getOptions().colors[2],
            labels: {
              y: 25,
              useHTML: true,
              style: {
                color: Highcharts.getOptions().colors[1]
              },
              formatter: function() {
                return "Hey " + this.value;
              }
            }
          },
          yAxis: {
            showEmpty: false,
            gridLineWidth: 1,
            gridLineColor: 'rgb(225,231,217)',
            labels: {
              style: {
                color: Highcharts.getOptions().colors[1]
              }
            },
            title: {
              text: null
            }
          },
          plotOptions: {
            areaspline: {
              lineWidth: 3,
              marker: {
                fillColor: 'rgb(225,231,217)',
                lineColor: 'rgb(65,105,42)',
                lineWidth: 4,
                radius: 6
              }
            }
          },
          series: [
            {
              name: '今日',
              data: weeklyExpenses,
              fillColor: {
                linearGradient: [0, 0, 0, 270],
                stops: [[0, 'rgba(29,78,0,0.6)'], [1, 'rgba(29,78,0,0.05)']]
              }
            }
          ]
        };
        $scope.weeklyChart = chart;
        return $scope.weeklyTotal = weeklyExpenses.reduce(function(x, y) {
          return x + y;
        });
      });
    }
  ]);

  wwAppDep.controller('DetailsCtrl', [
    '$scope', '$http', '$routeParams', 'DetailsAPI', 'SharedProperties', function($scope, $http, $routeParams, DetailsAPI, SharedProperties) {
      var listExpenses, period, prev;

      listExpenses = function(period) {
        var paramsWeek;

        paramsWeek = {
          userid: $routeParams.userId,
          fromdate: period.firstWeekDay,
          enddate: period.lastWeekDay
        };
        return DetailsAPI.list(paramsWeek, function(data) {
          var currentDate, expenseDict, k, result, results, v, _i, _len;

          expenseDict = {};
          results = data;
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            currentDate = Date.parse(result.date).toString("yyyy-MM-dd");
            delete result.date;
            if (!expenseDict[currentDate]) {
              expenseDict[currentDate] = [result];
            } else {
              expenseDict[currentDate].push(result);
            }
          }
          $scope.expenses = (function() {
            var _results;

            _results = [];
            for (k in expenseDict) {
              v = expenseDict[k];
              _results.push({
                date: k,
                expenses: v
              });
            }
            return _results;
          })();
          return console.log($scope.expenses);
        });
      };
      prev = 0;
      period = SharedProperties.getWeek(prev);
      listExpenses(period);
      $scope.removeExpense = function(expenseId, dateIdx, idx) {
        var paramsExpense, toRemove;

        toRemove = window.confirm("确认删除？");
        if (toRemove) {
          paramsExpense = {
            userid: $routeParams.userId,
            expenseid: expenseId
          };
          return DetailsAPI.remove(paramsExpense, function(data) {
            var expensesList;

            if (data.errorcode === "200") {
              expensesList = $scope.expenses[dateIdx].expenses;
              expensesList.splice(idx, 1);
              if (expensesList.length === 0) {
                return $scope.expenses.splice(dateIdx, 1);
              }
            }
          });
        }
      };
      return $scope.loadPrevWeek = function() {
        prev += 1;
        period = SharedProperties.getWeek(prev);
        return listExpenses(period);
      };
    }
  ]);

  wwAppDep.directive('chart', function() {
    return {
      restrict: 'E',
      template: '<div></div>',
      transclude: true,
      replace: true,
      link: function(scope, elem, attrs) {
        var chartsDefaults;

        chartsDefaults = {
          chart: {
            renderTo: elem[0],
            type: attrs.type || null,
            height: attrs.height || null,
            width: attrs.width || null
          },
          title: {
            text: attrs.title || null
          }
        };
        return scope.$watch(function() {
          return attrs.value;
        }, function(value) {
          var chart, deepCopy, newSettings;

          if (!attrs.value) {
            return true;
          }
          deepCopy = true;
          newSettings = {};
          $.extend(deepCopy, newSettings, chartsDefaults, JSON.parse(attrs.value));
          return chart = new Highcharts.Chart(newSettings);
        });
      }
    };
  });

  wwAppDep.filter('currency', function() {
    return function(num, symbol, precision, thousand, decimal, format) {
      if (symbol == null) {
        symbol = "$";
      }
      if (precision == null) {
        precision = 2;
      }
      if (thousand == null) {
        thousand = ",";
      }
      if (decimal == null) {
        decimal = ".";
      }
      if (format == null) {
        format = "%s%f";
      }
      return accounting.formatMoney(num, symbol, precision, thousand, decimal, format);
    };
  });

  wwAppDep.filter('dateformat', function() {
    return function(date, format) {
      if (format == null) {
        format = "yyyy-MM-dd";
      }
      return Date.parse(date).toString(format);
    };
  });

  wwAppDep.filter('isnotes', function() {
    return function(str) {
      var notes;

      if (str === "") {
        if (str === "") {
          return notes = "未知消费";
        }
      } else {
        return notes = str;
      }
    };
  });

  wwAppDep.service('SharedProperties', [
    '$filter', function($filter) {
      return this.getWeek = function(weeks) {
        var days, firstDay, lastDay, obj;

        if (weeks == null) {
          weeks = 0;
        }
        days = -(weeks * 7);
        if (Date.today().is().sunday()) {
          firstDay = Date.previous().monday().addDays(days);
        } else {
          firstDay = Date.monday().addDays(days);
        }
        lastDay = Date.next().monday().addSeconds(-1);
        obj = {
          firstWeekDay: $filter('date')(firstDay, 'yyyy-MM-dd HH:mm:ss'),
          lastWeekDay: $filter('date')(lastDay, 'yyyy-MM-dd HH:mm:ss')
        };
        return obj;
      };
    }
  ]);

  wwAppDep.factory('DashboardAPI', [
    '$resource', function($resource) {
      return $resource('http://h.woojuu.cc/:api', {
        api: 'summary'
      }, {
        summary: {
          method: 'GET',
          params: {
            userid: '@userid',
            categories: '@categories',
            fromdate: '@fromdate',
            enddate: '@enddate'
          },
          isArray: true
        },
        category: {
          method: 'GET',
          params: {
            api: 'topn_category',
            userid: '@userid',
            fromdate: '@fromdate',
            enddate: '@enddate',
            limit: '@limit'
          },
          isArray: true
        },
        chart: {
          method: 'GET',
          params: {
            api: 'summary_daily',
            userid: '@userid',
            fromdate: '@fromdate',
            enddate: '@enddate'
          },
          isArray: true
        }
      });
    }
  ]);

  wwAppDep.factory('DetailsAPI', [
    '$resource', function($resource) {
      return $resource('http://h.woojuu.cc/:api', {
        api: 'list_expense'
      }, {
        list: {
          method: 'GET',
          params: {
            userid: '@userid',
            fromdate: '@fromdate',
            enddate: '@enddate'
          },
          isArray: true
        },
        remove: {
          method: 'POST',
          params: {
            api: 'delete_expense',
            userid: '@userid',
            expenseid: '@expenseid'
          }
        }
      });
    }
  ]);

}).call(this);
